/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servidor_web_socket;

import br.com.jmary.home.Home;
import br.com.jmary.utilidades.PopupMenu_Colar;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.HttpCookie;
import java.net.Socket;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import javax.net.ssl.HttpsURLConnection;

/**
 *
 * @author NewUser
 */
public class Socket_Cliente extends javax.swing.JPanel {

    Home Home;
    
    /**
     * Creates new form Cliente_Socket
     * @param Home2
     */
    public Socket_Cliente( Home Home2 ) {
        initComponents();
        Home = Home2;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        JPOpcao_26 = new javax.swing.JPanel();
        jLabel80 = new javax.swing.JLabel();
        JPOpcao_27 = new javax.swing.JPanel();
        tf_Endereco_Socket_Cliente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        conectar = new javax.swing.JButton();
        bt_Obter_Codigo_Fonte = new javax.swing.JButton();
        bt_Obter_Codigo_Fonte_Automatico = new javax.swing.JButton();
        tf_porta = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_Recepcao = new javax.swing.JTextArea();

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(888, 71));

        JPOpcao_26.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 1, new java.awt.Color(153, 0, 153)));
        JPOpcao_26.setPreferredSize(new java.awt.Dimension(284, 27));
        JPOpcao_26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JPOpcao_26MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JPOpcao_26MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                JPOpcao_26MousePressed(evt);
            }
        });

        jLabel80.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel80.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel80.setText("Socket_Cliente");

        javax.swing.GroupLayout JPOpcao_26Layout = new javax.swing.GroupLayout(JPOpcao_26);
        JPOpcao_26.setLayout(JPOpcao_26Layout);
        JPOpcao_26Layout.setHorizontalGroup(
            JPOpcao_26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPOpcao_26Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel80, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
        );
        JPOpcao_26Layout.setVerticalGroup(
            JPOpcao_26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel80, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        JPOpcao_27.setBackground(new java.awt.Color(255, 255, 255));
        JPOpcao_27.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 0, 153)));
        JPOpcao_27.setPreferredSize(new java.awt.Dimension(284, 27));
        JPOpcao_27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JPOpcao_27MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JPOpcao_27MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                JPOpcao_27MousePressed(evt);
            }
        });

        tf_Endereco_Socket_Cliente.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tf_Endereco_Socket_Cliente.setText("graph.facebook.com");
        tf_Endereco_Socket_Cliente.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        tf_Endereco_Socket_Cliente.setPreferredSize(new java.awt.Dimension(209, 25));
        tf_Endereco_Socket_Cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_Endereco_Socket_ClienteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tf_Endereco_Socket_ClienteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tf_Endereco_Socket_ClienteMouseExited(evt);
            }
        });
        tf_Endereco_Socket_Cliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_Endereco_Socket_ClienteKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout JPOpcao_27Layout = new javax.swing.GroupLayout(JPOpcao_27);
        JPOpcao_27.setLayout(JPOpcao_27Layout);
        JPOpcao_27Layout.setHorizontalGroup(
            JPOpcao_27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPOpcao_27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tf_Endereco_Socket_Cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        JPOpcao_27Layout.setVerticalGroup(
            JPOpcao_27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPOpcao_27Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tf_Endereco_Socket_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel6.setText("SWT");

        conectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home_controle_menus_norte/imagens/nuvem.png"))); // NOI18N
        conectar.setToolTipText("Opções");
        conectar.setBorder(null);
        conectar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                conectarMousePressed(evt);
            }
        });

        bt_Obter_Codigo_Fonte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home_controle_menus_norte/imagens/html.png"))); // NOI18N
        bt_Obter_Codigo_Fonte.setToolTipText("Obter Apenas o Código Fonte");
        bt_Obter_Codigo_Fonte.setBorder(null);
        bt_Obter_Codigo_Fonte.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bt_Obter_Codigo_Fonte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bt_Obter_Codigo_FonteMousePressed(evt);
            }
        });

        bt_Obter_Codigo_Fonte_Automatico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home_controle_menus_norte/imagens/sql.png"))); // NOI18N
        bt_Obter_Codigo_Fonte_Automatico.setToolTipText("Obter o Código Fonte E Alterar o ID - E setar no Brouser");
        bt_Obter_Codigo_Fonte_Automatico.setBorder(null);
        bt_Obter_Codigo_Fonte_Automatico.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bt_Obter_Codigo_Fonte_Automatico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bt_Obter_Codigo_Fonte_AutomaticoMousePressed(evt);
            }
        });

        tf_porta.setText("80");

        jLabel7.setText("Porta:");

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_porta, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(215, 215, 215)
                        .addComponent(bt_Obter_Codigo_Fonte, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_Obter_Codigo_Fonte_Automatico)
                        .addGap(145, 145, 145))
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(JPOpcao_26, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JPOpcao_27, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(conectar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bt_Obter_Codigo_Fonte)
                            .addComponent(bt_Obter_Codigo_Fonte_Automatico)
                            .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tf_porta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)))
                        .addGap(4, 4, 4))
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)))
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JPOpcao_27, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JPOpcao_26, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(conectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        txt_Recepcao.setColumns(20);
        txt_Recepcao.setRows(5);
        jScrollPane1.setViewportView(txt_Recepcao);

        jTabbedPane1.addTab("Recepção", jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void JPOpcao_26MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPOpcao_26MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_JPOpcao_26MouseEntered

    private void JPOpcao_26MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPOpcao_26MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_JPOpcao_26MouseExited

    private void JPOpcao_26MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPOpcao_26MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_JPOpcao_26MousePressed

    PopupMenu_Colar PopupMenu_Colar;
    private void tf_Endereco_Socket_ClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_Endereco_Socket_ClienteMouseClicked
        try{
            PopupMenu_Colar = new PopupMenu_Colar(tf_Endereco_Socket_Cliente);
        } catch( Exception e ){}
    }//GEN-LAST:event_tf_Endereco_Socket_ClienteMouseClicked

    private void tf_Endereco_Socket_ClienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_Endereco_Socket_ClienteMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_Endereco_Socket_ClienteMouseEntered

    private void tf_Endereco_Socket_ClienteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_Endereco_Socket_ClienteMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_Endereco_Socket_ClienteMouseExited

    private void tf_Endereco_Socket_ClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_Endereco_Socket_ClienteKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_Endereco_Socket_ClienteKeyReleased

    private void JPOpcao_27MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPOpcao_27MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_JPOpcao_27MouseEntered

    private void JPOpcao_27MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPOpcao_27MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_JPOpcao_27MouseExited

    private void JPOpcao_27MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPOpcao_27MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_JPOpcao_27MousePressed

    private void conectarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_conectarMousePressed
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 );            
            
            int int_porta = 0;
            String url = null;
            try{ int_porta = Integer.parseInt( tf_porta.getText().trim() ); }catch( Exception e ){ e.printStackTrace(); }  
            try{ url = tf_Endereco_Socket_Cliente.getText().trim(); }catch( Exception e ){ e.printStackTrace(); } 
            //HttpsURLConnection(url,int_porta);
            socket(url,int_porta);

        } catch( Exception e ){ e.printStackTrace(); } } }.start();
    }//GEN-LAST:event_conectarMousePressed

    private void bt_Obter_Codigo_FonteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_Obter_Codigo_FonteMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_Obter_Codigo_FonteMousePressed

    private void bt_Obter_Codigo_Fonte_AutomaticoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_Obter_Codigo_Fonte_AutomaticoMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_Obter_Codigo_Fonte_AutomaticoMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPOpcao_26;
    private javax.swing.JPanel JPOpcao_27;
    public javax.swing.JButton bt_Obter_Codigo_Fonte;
    public javax.swing.JButton bt_Obter_Codigo_Fonte_Automatico;
    public javax.swing.JButton conectar;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTextField tf_Endereco_Socket_Cliente;
    public javax.swing.JTextField tf_porta;
    public javax.swing.JTextArea txt_Recepcao;
    // End of variables declaration//GEN-END:variables

    int contador = 0;
    public void HttpsURLConnection (String url_str, int porta) { try {  
        
        URL url = null;
        try {  
                
            url = new URL( url_str );
                
            txt_Recepcao.append( "URL: OK - " + url.toString().trim() + "\n" );
        } catch( Exception e ){
            txt_Recepcao.append( "URL: erro - " + e.getMessage() + "\n" );
        }
      
        HttpsURLConnection conexao = null;
        try{
            
            //Os cookies são passados ​​do servidor para o cliente e vice-versa nos cabeçalhos HTTP de solicitações e respostas.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////         
            //conexao.setRequestProperty("Cookie", "c_user=4");        
            CookieManager cm = new CookieManager();
            cm.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
            CookieHandler.setDefault(cm); 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            
            conexao = (HttpsURLConnection) url.openConnection();
            
            List<HttpCookie> cookies = cm.getCookieStore().getCookies();
            for (HttpCookie cookie : cookies) {
                txt_Recepcao.append( "Name = " + cookie.getName() + "\n" );
                txt_Recepcao.append( "Value = " + cookie.getValue() + "\n" );
                txt_Recepcao.append( "Lifetime (seconds) = " + cookie.getMaxAge() + "\n" );
                txt_Recepcao.append( "Path = " + cookie.getPath() );
            }
            
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            BufferedReader obterCodigoFonte = new BufferedReader( new InputStreamReader( conexao.getInputStream() ) ); 
            int letra;
            while ( ( (letra = obterCodigoFonte.read()) != -1) ){ contador++;
                String str = String.valueOf( (char) letra );
                txt_Recepcao.append( str );
                if( str.equalsIgnoreCase(">") ){
                    txt_Recepcao.append( "\n" );
                }
                //if( contador > 1000 ){
                    //break;
                 //}
            }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        }catch( Exception e ){ 
            txt_Recepcao.append( "HttpsURLConnection: " + "Falha - conexao = HttpsURLConnection (HttpsURLConnection) url.openConnection();" + "\n");
            e.printStackTrace(); 
        }  
        
    }catch( Exception e ){ e.printStackTrace(); } }
    
    public void socket(String url, int porta){ try {              
      
        //cria um socket com o google na porta 80
        Socket socket;
        try{
            
            socket = new Socket( url, porta);
            txt_Recepcao.append( "Socket: " + "OK - Socket socket = new Socket( url, porta);" + "\n"); 
            
            //verifica se esta conectado
            if (socket.isConnected()) {
            
                //imprime o endereço de IP do servidor
                //System.out.println("Conectado a " + socket.getInetAddress());
                String[] nome_e_ip_do_servidor = socket.getInetAddress().toString().split("/");
                txt_Recepcao.append( "Nome do servidor conectado: " + nome_e_ip_do_servidor[0] + " - IP: " + nome_e_ip_do_servidor[1] +"\n");
                               
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
            /* veja que a requisição termina com \r\n que equivale a <CR><LF>
            para encerar a requisição tem uma linha em branco */
            Map<String, String> parametros = new HashMap<>();
            parametros.put("param1", "val");

            String requisicao = ""
                    + "GET /v2.12/{" + porta +  "}/accounts" + " HTTP/1.1\r\n"            //+ "GET / HTTP/1.1\r\n"
                    + "Host: " + url + "\r\n"
                    + "\r\n";
            txt_Recepcao.append( "Requisicao" + "\n"); 
            txt_Recepcao.append( requisicao + "\n"); 
            //OutputStream para enviar a requisição
            OutputStream envioServ = socket.getOutputStream();
            //temos que mandar a requisição no formato de vetor de bytes
            byte[] b = requisicao.getBytes();
            //escreve o vetor de bytes no "recurso" de envio 
            envioServ.write(b);
            //marca a finalização da escrita
            envioServ.flush();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
            //cria um scanner a partir do InputStream que vem do servidor
            Scanner sc = new Scanner(socket.getInputStream());
            txt_Recepcao.append( "Retorno" + "\n"); 
            //enquanto houver algo para ler
            while (sc.hasNext()) {
                //imprime uma linha da resposta
                //System.out.println(sc.nextLine());
                txt_Recepcao.append( sc.nextLine() + "\n"); 
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                  
                
            }
            
        }catch( Exception e ){ 
            txt_Recepcao.append( "Socket: " + "Falha - Socket socket = new Socket( url, porta);" + "\n");
            e.printStackTrace(); 
        } 
        
    }catch( Exception e ){ e.printStackTrace(); } }
    
    public void cliente(String url, int porta) { try {              
            
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           
        //cria um socket com o google na porta 80
        Socket socket = new Socket( url, porta);
        //verifica se esta conectado
        if (socket.isConnected()) { 
            //imprime o endereço de IP do servidor
            //System.out.println("Conectado a " + socket.getInetAddress());
            txt_Recepcao.append( "Conectado a " + socket.getInetAddress() + "\n"); 
            String str = "";
            try{ 
                str = socket.getInetAddress().toString();
                txt_Recepcao.append( str + "\n"); 
            }catch( Exception e ){ e.printStackTrace(); }   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
            /* veja que a requisição termina com \r\n que equivale a <CR><LF>
            para encerar a requisição tem uma linha em branco */
            String requisicao = ""
                    + "GET / HTTP/1.1\r\n"
                    + "Host: " + url + "\r\n"
                    + "\r\n";
            txt_Recepcao.append( "Requisicao" + "\n"); 
            txt_Recepcao.append( requisicao + "\n"); 
            //OutputStream para enviar a requisição
            OutputStream envioServ = socket.getOutputStream();
            //temos que mandar a requisição no formato de vetor de bytes
            byte[] b = requisicao.getBytes();
            //escreve o vetor de bytes no "recurso" de envio 
            envioServ.write(b);
            //marca a finalização da escrita
            envioServ.flush();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
            //cria um scanner a partir do InputStream que vem do servidor
            Scanner sc = new Scanner(socket.getInputStream());
            txt_Recepcao.append( "Retorno" + "\n"); 
            //enquanto houver algo para ler
            while (sc.hasNext()) {
                //imprime uma linha da resposta
                //System.out.println(sc.nextLine());
                txt_Recepcao.append( sc.nextLine() + "\n"); 
            }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
            //cria um BufferedReader a partir do InputStream do cliente
            /*BufferedReader buffer = new BufferedReader(new InputStreamReader(socket.getInputStream()));*/
            //System.out.println("retorno: ");
            /*txt_Recepcao.append( "Retorno" + "\n");*/ 
            //Lê a primeira linha
            /*String linha = buffer.readLine();*/
            //Enquanto a linha não for vazia
            /*while (!linha.isEmpty()) {*/
                //imprime a linha
                //System.out.println(linha);
                //lê a proxima linha
            /*    linha = buffer.readLine();
                txt_Recepcao.append( linha + "\n" );
            }*/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

        }
    }catch( Exception e ){ e.printStackTrace(); } }
    
}
